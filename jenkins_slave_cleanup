#!/usr/bin/env python

import argparse
import datetime
import logging
import sys

import docker


def get_arguments(argv):
    argument_parser = argparse.ArgumentParser()

    argument_parser.add_argument(
        '-d', '--debug',
        action='store_true',
        help='Enable debug mode',
    )

    argument_parser.add_argument(
        '-H', '--host',
        default='unix://var/run/docker.sock',
        help='The protocol+hostname+port where the Docker server is hosted.',
    )

    argument_parser.add_argument(
        'time',
        type=int,
        help='Slaves running longer than this in seconds will be removed.',
    )

    return argument_parser.parse_args(argv)


def get_logger(debug=False):
    logger = logging.getLogger(__name__)

    logging.basicConfig()

    if debug:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)

    return logger


def main(argv=None):
    if argv is None:
        argv = sys.argv[1:]

    arguments = get_arguments(argv=argv)
    logger = get_logger(debug=arguments.debug)

    base_time = datetime.datetime.now()

    docker_client = docker.Client(base_url=arguments.host, version='auto')

    containers = docker_client.containers()

    logger.info('Found %d containers.', len(containers))

    for container in containers:
        created_at = datetime.datetime.fromtimestamp(container['Created'])
        uptime = base_time - created_at

        logger.debug(
            'Container "%s" created at %s, running for %s.',
            container['Id'],
            created_at.isoformat(),
            uptime,
        )

        if uptime.total_seconds() > arguments.time:
            logger.info(
                'Removing required for container "%s"...',
                container['Id'],
            )

    return 0


if __name__ == '__main__':
    sys.exit(main())
